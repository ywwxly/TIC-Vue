(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    VERSION: '1.0.0',
    ROLE: {
        MASTER: 'master',
        VIEWER: 'viewer'
    }
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(2);


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.__useDefault = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = __webpack_require__(0);

var _constants2 = _interopRequireDefault(_constants);

var _wildemitter = __webpack_require__(3);

var _wildemitter2 = _interopRequireDefault(_wildemitter);

var _config = __webpack_require__(4);

var _config2 = _interopRequireDefault(_config);

var _typeof = __webpack_require__(5);

var _typeof2 = _interopRequireDefault(_typeof);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var minScale = 100;
var maxScale = 400;
var scaleStep = 50;

var Toolbar = function () {
    /**
     * @constructor 
     * @description 分页入口类
     * @param {*} dom 节点id 或者 节点对象
     * @param {*} config 配置项
     * @version 1.0.0
     */
    function Toolbar(opts) {
        _classCallCheck(this, Toolbar);

        this.type = opts.type || 'whiteboard';
        this.total = opts.total;
        this.current = opts.current || 1;
        this.scale = opts.scale || 100;
        this.role = opts.role || _constants2.default.ROLE.VIEWER;
        this.showButton = !!this.role === _constants2.default.ROLE.MASTER;
        this.mount();
    }

    _createClass(Toolbar, [{
        key: 'mount',
        value: function mount() {
            this.$elem = this.$elem || document.createElement('div');
            this.initRender();
            return this.$elem;
        }
    }, {
        key: 'initRender',
        value: function initRender() {
            var role = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'client';

            this.$elem.className = 'course-item__ft ' + (this.role === _constants2.default.ROLE.VIEWER ? 'hover-disable' : '');
            // if( this.total === 1 ){
            //     this.$elem.style.display = 'none'
            // }

            if (this.type === 'animation') {
                this.renderAnimationBottomBar();
            } else {
                this.renderWhiteBoardBottomBar();
            }
        }
    }, {
        key: 'renderWhiteBoardBottomBar',
        value: function renderWhiteBoardBottomBar() {
            var _this = this;

            //放大缩小
            this.$shrink = this.$shrink || document.createElement('div');
            this.$shrink.className = 'course-item__ft-shrink';

            this.$minimize = this.$minimize || this.createBtn('minimize');
            this.$maximum = this.$maximum || this.createBtn('plus');
            this.$scalecontent = this.$scalecontent || this.createContentDom();
            this.$scalecontent.innerHTML = this.getScaleHTML();

            if (this.role === _constants2.default.ROLE.MASTER) {
                this.$minimize.style.display = '';
                this.$shrink.appendChild(this.$minimize);
            } else {
                this.$minimize.style.display = 'none';
            }
            this.$shrink.appendChild(this.$scalecontent);

            if (this.role === _constants2.default.ROLE.MASTER) {
                this.$maximum.style.display = '';
                this.$shrink.appendChild(this.$maximum);
            } else {
                this.$maximum.style.display = 'none';
            }

            if (this.role === _constants2.default.ROLE.MASTER) {
                this.$minimize.onclick = function () {
                    _this.minimize();
                };
                this.$maximum.onclick = function () {
                    _this.maximum();
                };
            }

            //工具
            this.$tool = this.$tool || document.createElement('div');
            this.$tool.className = 'course-item__ft-tool';

            this.$tooldrag = this.$tooldrag || this.createBtn('tooldrag');
            this.$toolrevoke = this.$toolrevoke || this.createBtn('toolrevoke');
            this.$toolrecovery = this.$toolrecovery || this.createBtn('toolrecovery');
            this.$tooldel = this.$tooldel || this.createBtn('tooldel');

            if (this.role === _constants2.default.ROLE.MASTER) {
                this.$tooldrag.style.display = '';
                this.$toolrevoke.style.display = '';
                this.$toolrecovery.style.display = '';
                this.$tooldel.style.display = '';
                this.$tool.appendChild(this.$tooldrag);
                this.$tool.appendChild(this.$toolrevoke);
                this.$tool.appendChild(this.$toolrecovery);
                this.$tool.appendChild(this.$tooldel);

                this.$tooldrag.onclick = function () {
                    _this.tooldrag();
                };
                this.$toolrevoke.onclick = function () {
                    _this.toolrevoke();
                };
                this.$toolrecovery.onclick = function () {
                    _this.toolrecovery();
                };
                this.$tooldel.onclick = function () {
                    _this.tooldel();
                };
            } else {
                this.$tooldrag.style.display = 'none';
                this.$toolrevoke.style.display = 'none';
                this.$toolrecovery.style.display = 'none';
                this.$tooldel.style.display = 'none';
            }

            //翻页
            this.$page = this.$page || document.createElement('div');
            this.$page.className = 'course-item__ft-page';

            this.$prev = this.$prev || this.createBtn('left');
            this.$next = this.$next || this.createBtn('right');
            this.$pagecontent = this.$pagecontent || this.createContentDom();
            this.$pagecontent.innerHTML = this.getCurrentPageHTML();

            if (this.total === 1) {
                this.$page.style.display = 'none';
            }

            if (this.role === _constants2.default.ROLE.MASTER) {
                this.$prev.style.display = '';
                this.$page.appendChild(this.$prev);
            } else {
                this.$prev.style.display = 'none';
            }

            this.$page.appendChild(this.$pagecontent);
            if (this.role === _constants2.default.ROLE.MASTER) {
                this.$next.style.display = '';
                this.$page.appendChild(this.$next);
            } else {
                this.$next.style.display = 'none';
            }

            if (this.role === _constants2.default.ROLE.MASTER) {
                this.$prev.onclick = function () {
                    _this.prev();
                };
                this.$next.onclick = function () {
                    _this.next();
                };
            }

            this.$elem.appendChild(this.$shrink);
            this.$elem.appendChild(this.$page);
            this.$elem.appendChild(this.$tool);
        }
    }, {
        key: 'renderAnimationBottomBar',
        value: function renderAnimationBottomBar() {
            var _this2 = this;

            //翻页
            this.$prev = this.$prev || this.createBtn('left');
            this.$play = this.$play || this.createBtn('play');
            this.$next = this.$next || this.createBtn('right');

            this.$elem.appendChild(this.$prev);
            this.$elem.appendChild(this.$play);
            this.$elem.appendChild(this.$next);

            this.$pagecontent = this.createContentDom();

            if (this.role === _constants2.default.ROLE.MASTER) {
                this.$prev.onclick = function () {
                    _this2.prev();
                };
                this.$next.onclick = function () {
                    _this2.next();
                };
                this.$play.onclick = function () {
                    _this2.play();
                };
            }
        }
    }, {
        key: 'createBtn',
        value: function createBtn(icon) {
            var a = document.createElement('a');
            a.className = 'tic-btn';
            a.href = 'javascript:;';
            a.innerHTML = '<i class="tic-icon tic-icon-' + icon + '"></i>';
            return a;
        }
    }, {
        key: 'createContentDom',
        value: function createContentDom() {
            var dom = document.createElement('span');
            dom.className = 'course-item__ft-shrink--text';
            return dom;
        }
    }, {
        key: 'updateScale',
        value: function updateScale(scale) {
            this.scale = scale;
            this.$scalecontent.innerHTML = this.getScaleHTML();

            if (this.scale == 100) {
                this.$tooldrag.classList.add('not-allowed');
            } else {
                this.$tooldrag.classList.remove('not-allowed');
            }
        }
    }, {
        key: 'updatePage',
        value: function updatePage(opt) {
            console.debug('[updatePage]', opt);
            var pre_total = this.total;
            var pre_current = this.current;
            if (opt.total) {
                this.total = opt.total;
            }
            if (opt.total === 1) {
                this.$page.style.display = 'none';
            } else {
                this.$page.style.display = 'block';
            }
            if (opt.current) {
                this.current = opt.current;
            }
            if (this.total !== this.current) {
                this.$elem.style.display = 'block';
            }
            if (pre_total != this.total || pre_current != this.current) {
                this.$pagecontent.innerHTML = this.getCurrentPageHTML();
            }
        }
    }, {
        key: 'next',
        value: function next(e) {
            console.debug('[next]', this.current, this.total);
            if (this.current == this.total) {
                return;
            }
            this.current++;
            this.emit('next', this.current);
            this.$pagecontent.innerHTML = this.getCurrentPageHTML();
        }
    }, {
        key: 'play',
        value: function play(e) {
            console.debug('[play]', this.current, this.total);
            if (this.current == this.total) {
                return;
            }
            this.current++;
            this.emit('play', this.current);
        }
    }, {
        key: 'prev',
        value: function prev() {
            console.debug('[prev]', this.current, this.total);
            if (this.current == 1) {
                return;
            }
            this.current--;
            this.emit('prev', this.current);
            this.$pagecontent.innerHTML = this.getCurrentPageHTML();
        }
    }, {
        key: 'minimize',
        value: function minimize(e) {
            console.debug('[minimize]');
            this.scale -= scaleStep;
            this.scale = Math.max(this.scale, minScale);
            this.emit('minimize', this.scale);
            this.$scalecontent.innerHTML = this.getScaleHTML();
            if (this.scale == 100) {
                this.resetCss();
                this.$tooldrag.classList.add('not-allowed');
            } else {
                this.$tooldrag.classList.remove('not-allowed');
            }
        }
    }, {
        key: 'maximum',
        value: function maximum() {
            console.debug('[maximum]');
            this.scale += scaleStep;
            this.scale = Math.min(this.scale, maxScale);
            this.emit('maximum', this.scale);
            this.$scalecontent.innerHTML = this.getScaleHTML();
            if (this.scale == 100) {
                this.$tooldrag.classList.add('not-allowed');
            } else {
                this.$tooldrag.classList.remove('not-allowed');
            }
        }
    }, {
        key: 'tooldrag',
        value: function tooldrag() {
            console.debug('[tooldrag]');
            if (this.scale == 100) {
                this.$tooldrag.classList.add('not-allowed');
                this.emit('tooldrag', false);
                return;
            } else {
                this.$tooldrag.classList.remove('not-allowed');
                if (this.$tooldrag.classList.contains('actived')) {
                    this.$tooldrag.classList.remove('actived');
                    this.emit('tooldrag', false);
                } else {
                    this.toggleBtn('tooldrag');
                    this.emit('tooldrag', true);
                }
            }
        }
    }, {
        key: 'toolrevoke',
        value: function toolrevoke() {
            console.debug('[toolrevoke]');
            this.emit('toolrevoke');
            this.toggleBtn();
        }
    }, {
        key: 'toolrecovery',
        value: function toolrecovery() {
            console.debug('[toolrecovery]');
            this.emit('toolrecovery');
            this.toggleBtn();
        }
    }, {
        key: 'tooldel',
        value: function tooldel() {
            console.debug('[tooldel]');
            this.emit('tooldel');
            this.toggleBtn();
        }
    }, {
        key: 'resetCss',
        value: function resetCss() {
            this.$tooldrag.classList.remove('actived');
            // this.$toolrevoke.classList.remove('actived');
            // this.$toolrecovery.classList.remove('actived');
            // this.$tooldel.classList.remove('actived');
        }
    }, {
        key: 'toggleBtn',
        value: function toggleBtn(name) {
            this.resetCss();
            if (name) {
                this['$' + name].classList.add('actived');
            }
        }
    }, {
        key: 'getCurrentPageHTML',
        value: function getCurrentPageHTML() {
            return '<span class="course-item__ft-shrink--text">' + this.current + '/<em class="is-actived">' + this.total + '</em></span>';
        }
    }, {
        key: 'getScaleHTML',
        value: function getScaleHTML() {
            return '<span class="course-item__ft-shrink--text">' + (this.scale || '100') + '%</span>';
        }
    }, {
        key: 'setRole',
        value: function setRole(role) {
            this.role = role === _constants2.default.ROLE.MASTER ? _constants2.default.ROLE.MASTER : _constants2.default.ROLE.VIEWER;
            this.initRender(role);
        }
    }]);

    return Toolbar;
}();

Toolbar.Type = _constants2.default.TYPE;

_wildemitter2.default.mixin(Toolbar);
exports.default = Toolbar;
var __useDefault = exports.__useDefault = true;

/***/ }),
/* 3 */
/***/ (function(module, exports) {

/*
WildEmitter.js is a slim little event emitter by @henrikjoreteg largely based
on @visionmedia's Emitter from UI Kit.

Why? I wanted it standalone.

I also wanted support for wildcard emitters like this:

emitter.on('*', function (eventName, other, event, payloads) {

});

emitter.on('somenamespace*', function (eventName, payloads) {

});

Please note that callbacks triggered by wildcard registered events also get
the event name as the first argument.
*/

module.exports = WildEmitter;

function WildEmitter() { }

WildEmitter.mixin = function (constructor) {
    var prototype = constructor.prototype || constructor;

    prototype.isWildEmitter= true;

    // Listen on the given `event` with `fn`. Store a group name if present.
    prototype.on = function (event, groupName, fn) {
        this.callbacks = this.callbacks || {};
        var hasGroup = (arguments.length === 3),
            group = hasGroup ? arguments[1] : undefined,
            func = hasGroup ? arguments[2] : arguments[1];
        func._groupName = group;
        (this.callbacks[event] = this.callbacks[event] || []).push(func);
        return this;
    };

    // Adds an `event` listener that will be invoked a single
    // time then automatically removed.
    prototype.once = function (event, groupName, fn) {
        var self = this,
            hasGroup = (arguments.length === 3),
            group = hasGroup ? arguments[1] : undefined,
            func = hasGroup ? arguments[2] : arguments[1];
        function on() {
            self.off(event, on);
            func.apply(this, arguments);
        }
        this.on(event, group, on);
        return this;
    };

    // Unbinds an entire group
    prototype.releaseGroup = function (groupName) {
        this.callbacks = this.callbacks || {};
        var item, i, len, handlers;
        for (item in this.callbacks) {
            handlers = this.callbacks[item];
            for (i = 0, len = handlers.length; i < len; i++) {
                if (handlers[i]._groupName === groupName) {
                    //console.log('removing');
                    // remove it and shorten the array we're looping through
                    handlers.splice(i, 1);
                    i--;
                    len--;
                }
            }
        }
        return this;
    };

    // Remove the given callback for `event` or all
    // registered callbacks.
    prototype.off = function (event, fn) {
        this.callbacks = this.callbacks || {};
        var callbacks = this.callbacks[event],
            i;

        if (!callbacks) return this;

        // remove all handlers
        if (arguments.length === 1) {
            delete this.callbacks[event];
            return this;
        }

        // remove specific handler
        i = callbacks.indexOf(fn);
        callbacks.splice(i, 1);
        if (callbacks.length === 0) {
            delete this.callbacks[event];
        }
        return this;
    };

    /// Emit `event` with the given args.
    // also calls any `*` handlers
    prototype.emit = function (event) {
        this.callbacks = this.callbacks || {};
        var args = [].slice.call(arguments, 1),
            callbacks = this.callbacks[event],
            specialCallbacks = this.getWildcardCallbacks(event),
            i,
            len,
            item,
            listeners;

        if (callbacks) {
            listeners = callbacks.slice();
            for (i = 0, len = listeners.length; i < len; ++i) {
                if (!listeners[i]) {
                    break;
                }
                listeners[i].apply(this, args);
            }
        }

        if (specialCallbacks) {
            len = specialCallbacks.length;
            listeners = specialCallbacks.slice();
            for (i = 0, len = listeners.length; i < len; ++i) {
                if (!listeners[i]) {
                    break;
                }
                listeners[i].apply(this, [event].concat(args));
            }
        }

        return this;
    };

    // Helper for for finding special wildcard event handlers that match the event
    prototype.getWildcardCallbacks = function (eventName) {
        this.callbacks = this.callbacks || {};
        var item,
            split,
            result = [];

        for (item in this.callbacks) {
            split = item.split('*');
            if (item === '*' || (split.length === 2 && eventName.slice(0, split[0].length) === split[0])) {
                result = result.concat(this.callbacks[item]);
            }
        }
        return result;
    };

};

WildEmitter.mixin(WildEmitter);


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _constants = __webpack_require__(0);

var _constants2 = _interopRequireDefault(_constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Config() {
    this.init();
}

Config.prototype = {
    init: function init() {
        this.debug = false; // 调试模式
    },
    setDebug: function setDebug() {
        var debug = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        this.debug = debug;
    },
    reset: function reset() {}
};

exports.default = Config;

/***/ }),
/* 5 */
/***/ (function(module, exports) {


var toString = Object.prototype.toString;

module.exports = function(object) {
  var type = typeof object;

  if (type === 'undefined') {
    return 'undefined';
  }
  
  if (object) {
    type = object.constructor.name; 
  } else if (type === 'object') {
    type = toString.call(object).slice(8, -1);
  }

  return type.toLowerCase();
}



/***/ })
/******/ ]);
});